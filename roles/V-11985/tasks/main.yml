###############################################
# Developed For 7.2.4 by Andrew Darley     
#     andrew.darley.ctr@navy.mil  
#      
# Originally created for:
# Solaris 10 x86/SPARC Manual STIG - Ver 1
# Release: 19 Benchmark Date: 28 Jul 2017
# 
# This is expected to run with a play book that
# defines these variables
# output_path
# out_file
# FIX
###############################################


- name: V-11985 Finding Open Tags
  blockinfile:
    dest: "{{out_file}}"
    state: present
    marker: " "
    block: |
      <finding
      v_id="V-11985"
      rule_id="SV-12486r4_rule"
      raw_risk="II"
      datetime="{{ ansible_date_time.date }}">
      <title>All global initialization files executable search paths must contain only authorized paths.</title>
      <discussion>The executable search path (typically the PATH environment variable) contains a list of directories for the shell to search to find executables. If this path includes the current working directory or other relative paths, executables in these directories may be executed instead of system commands. This variable is formatted as a colon-separated list of directories. If there is an empty entry, such as a leading or trailing colon, two consecutive colons, or a single period, this is interpreted as the current working directory. Paths starting with a slash (/) are absolute paths.</discussion>
      <check_content>Check the global initialization files' executable search paths.

      Procedure:
      # grep -i PATH /etc/profile /etc/bashrc /etc/csh.login /etc/csh.cshrc /etc/environment /etc/.login /etc/security/environ

      This variable is formatted as a colon-separated list of directories. 

      If there is an empty entry, such as a leading or trailing colon, or two consecutive colons, this is a finding. 

      If an entry begins with a character other than a slash (/), or has not been documented with the ISSO, this is a finding.
      </check_content>
      <fix_text>Edit the global initialization file(s) with PATH variables containing relative paths and remove any relative path form the PATH variables that have not been documented with the ISSO.  

      Edit the global initialization file(s) and remove any empty entry that is defined.
      </fix_text>


- name: V-11985 Check
  shell: grep -i PATH /etc/profile /etc/bashrc /etc/csh.login /etc/csh.cshrc /etc/environment /etc/.login /etc/security/environ 2>&1
  register: checkmyconf1
  ignore_errors: True
  changed_when: False

- name: V-11985 Check 2
  shell: grep -i PATH= /etc/profile /etc/bashrc /etc/csh.login /etc/csh.cshrc /etc/environment /etc/.login /etc/security/environ 2>/dev/null | awk '/::/'
  register: checkmyconf2
  ignore_errors: True
  changed_when: False

- name: V-11985 Pass
  blockinfile:
    dest: "{{out_file}}"
    state: present
    marker: " "
    block: |
      <procedure> <![CDATA[
      Procedure: 
      # {{ checkmyconf1.cmd }} ]]>
      </procedure>
      <output> 
      V-11985
      All global initialization files executable search paths must contain only authorized paths.
      If there is an empty entry, such as a leading or trailing colon, or two consecutive colons, this is a finding.
      <![CDATA[
      Procedure: 
      # {{ checkmyconf1.cmd }} 
      OUTPUT:
      ->  {{ checkmyconf1.stdout }}
      ]]>-
      This is NOT a finding
      -
      </output>
      <comments>Relative paths are not used for search paths</comments>
      <status>Not a Finding</status>
      <ccis>
      <cci>CCI-000225</cci>
      </ccis>
      </finding>
  when: (checkmyconf2.stdout == "" and REPORT == 1)

- name: V-11985 Fail
  blockinfile:
    dest: "{{out_file}}"
    state: present
    marker: " "
    block: |
      <procedure> <![CDATA[
      Procedure: 
      # {{ checkmyconf1.cmd }} ]]>
      </procedure>
      <output> 
      V-11985
      All global initialization files executable search paths must contain only authorized paths.
      If there is an empty entry, such as a leading or trailing colon, or two consecutive colons, this is a finding.
      <![CDATA[
      Procedure: 
      # {{ checkmyconf1.cmd }} 
      OUTPUT:
      ->  {{ checkmyconf1.stdout }}
      ]]>====================================================================
      This is a FINDING
      -
      </output>
      <comments>Relative paths are used for search paths</comments>
      <status>Ongoing</status>
      <ccis>
      <cci>CCI-000225</cci>
      </ccis>
      </finding>
  when: checkmyconf2.stdout != ""
